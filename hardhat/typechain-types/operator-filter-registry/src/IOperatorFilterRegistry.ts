/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IOperatorFilterRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "codeHashOf"
      | "copyEntriesOf"
      | "filteredCodeHashAt"
      | "filteredCodeHashes"
      | "filteredOperatorAt"
      | "filteredOperators"
      | "isCodeHashFiltered"
      | "isCodeHashOfFiltered"
      | "isOperatorAllowed"
      | "isOperatorFiltered"
      | "isRegistered"
      | "register"
      | "registerAndCopyEntries"
      | "registerAndSubscribe"
      | "subscribe"
      | "subscriberAt"
      | "subscribers"
      | "subscriptionOf"
      | "unregister"
      | "unsubscribe"
      | "updateCodeHash"
      | "updateCodeHashes"
      | "updateOperator"
      | "updateOperators"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "codeHashOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "copyEntriesOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "filteredCodeHashAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "filteredCodeHashes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "filteredOperatorAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "filteredOperators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCodeHashFiltered",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCodeHashOfFiltered",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorAllowed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorFiltered",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndCopyEntries",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndSubscribe",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriberAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregister",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCodeHash",
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCodeHashes",
    values: [AddressLike, BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperator",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperators",
    values: [AddressLike, AddressLike[], boolean]
  ): string;

  decodeFunctionResult(functionFragment: "codeHashOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "copyEntriesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filteredCodeHashAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filteredCodeHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filteredOperatorAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filteredOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCodeHashFiltered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCodeHashOfFiltered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorFiltered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAndCopyEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndSubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriberAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unregister", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCodeHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperators",
    data: BytesLike
  ): Result;
}

export interface IOperatorFilterRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IOperatorFilterRegistry;
  waitForDeployment(): Promise<this>;

  interface: IOperatorFilterRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  codeHashOf: TypedContractMethod<[addr: AddressLike], [string], "nonpayable">;

  copyEntriesOf: TypedContractMethod<
    [registrant: AddressLike, registrantToCopy: AddressLike],
    [void],
    "nonpayable"
  >;

  filteredCodeHashAt: TypedContractMethod<
    [registrant: AddressLike, index: BigNumberish],
    [string],
    "nonpayable"
  >;

  filteredCodeHashes: TypedContractMethod<
    [addr: AddressLike],
    [string[]],
    "nonpayable"
  >;

  filteredOperatorAt: TypedContractMethod<
    [registrant: AddressLike, index: BigNumberish],
    [string],
    "nonpayable"
  >;

  filteredOperators: TypedContractMethod<
    [addr: AddressLike],
    [string[]],
    "nonpayable"
  >;

  isCodeHashFiltered: TypedContractMethod<
    [registrant: AddressLike, codeHash: BytesLike],
    [boolean],
    "nonpayable"
  >;

  isCodeHashOfFiltered: TypedContractMethod<
    [registrant: AddressLike, operatorWithCode: AddressLike],
    [boolean],
    "nonpayable"
  >;

  isOperatorAllowed: TypedContractMethod<
    [registrant: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isOperatorFiltered: TypedContractMethod<
    [registrant: AddressLike, operator: AddressLike],
    [boolean],
    "nonpayable"
  >;

  isRegistered: TypedContractMethod<
    [addr: AddressLike],
    [boolean],
    "nonpayable"
  >;

  register: TypedContractMethod<
    [registrant: AddressLike],
    [void],
    "nonpayable"
  >;

  registerAndCopyEntries: TypedContractMethod<
    [registrant: AddressLike, registrantToCopy: AddressLike],
    [void],
    "nonpayable"
  >;

  registerAndSubscribe: TypedContractMethod<
    [registrant: AddressLike, subscription: AddressLike],
    [void],
    "nonpayable"
  >;

  subscribe: TypedContractMethod<
    [registrant: AddressLike, registrantToSubscribe: AddressLike],
    [void],
    "nonpayable"
  >;

  subscriberAt: TypedContractMethod<
    [registrant: AddressLike, index: BigNumberish],
    [string],
    "nonpayable"
  >;

  subscribers: TypedContractMethod<
    [registrant: AddressLike],
    [string[]],
    "nonpayable"
  >;

  subscriptionOf: TypedContractMethod<
    [addr: AddressLike],
    [string],
    "nonpayable"
  >;

  unregister: TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  unsubscribe: TypedContractMethod<
    [registrant: AddressLike, copyExistingEntries: boolean],
    [void],
    "nonpayable"
  >;

  updateCodeHash: TypedContractMethod<
    [registrant: AddressLike, codehash: BytesLike, filtered: boolean],
    [void],
    "nonpayable"
  >;

  updateCodeHashes: TypedContractMethod<
    [registrant: AddressLike, codeHashes: BytesLike[], filtered: boolean],
    [void],
    "nonpayable"
  >;

  updateOperator: TypedContractMethod<
    [registrant: AddressLike, operator: AddressLike, filtered: boolean],
    [void],
    "nonpayable"
  >;

  updateOperators: TypedContractMethod<
    [registrant: AddressLike, operators: AddressLike[], filtered: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "codeHashOf"
  ): TypedContractMethod<[addr: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "copyEntriesOf"
  ): TypedContractMethod<
    [registrant: AddressLike, registrantToCopy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "filteredCodeHashAt"
  ): TypedContractMethod<
    [registrant: AddressLike, index: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "filteredCodeHashes"
  ): TypedContractMethod<[addr: AddressLike], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "filteredOperatorAt"
  ): TypedContractMethod<
    [registrant: AddressLike, index: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "filteredOperators"
  ): TypedContractMethod<[addr: AddressLike], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "isCodeHashFiltered"
  ): TypedContractMethod<
    [registrant: AddressLike, codeHash: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isCodeHashOfFiltered"
  ): TypedContractMethod<
    [registrant: AddressLike, operatorWithCode: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isOperatorAllowed"
  ): TypedContractMethod<
    [registrant: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOperatorFiltered"
  ): TypedContractMethod<
    [registrant: AddressLike, operator: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[registrant: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerAndCopyEntries"
  ): TypedContractMethod<
    [registrant: AddressLike, registrantToCopy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAndSubscribe"
  ): TypedContractMethod<
    [registrant: AddressLike, subscription: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<
    [registrant: AddressLike, registrantToSubscribe: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscriberAt"
  ): TypedContractMethod<
    [registrant: AddressLike, index: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscribers"
  ): TypedContractMethod<[registrant: AddressLike], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "subscriptionOf"
  ): TypedContractMethod<[addr: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "unregister"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unsubscribe"
  ): TypedContractMethod<
    [registrant: AddressLike, copyExistingEntries: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCodeHash"
  ): TypedContractMethod<
    [registrant: AddressLike, codehash: BytesLike, filtered: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCodeHashes"
  ): TypedContractMethod<
    [registrant: AddressLike, codeHashes: BytesLike[], filtered: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOperator"
  ): TypedContractMethod<
    [registrant: AddressLike, operator: AddressLike, filtered: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOperators"
  ): TypedContractMethod<
    [registrant: AddressLike, operators: AddressLike[], filtered: boolean],
    [void],
    "nonpayable"
  >;

  filters: {};
}
