import type { NextPage } from 'next'
import Head from 'next/head'
import { useState, useEffect } from 'react'
import d3ToPng from 'd3-svg-to-png'
import { getAccount, watchAccount, writeContract } from '@wagmi/core'
import { useAppSelector } from 'store'
import { AppShell, Navbar, Header, Text } from '@mantine/core'
import { Group, Button, Box, Title } from '@mantine/core'
import { ScrollArea, AspectRatio, Center } from '@mantine/core'
import { modals } from '@mantine/modals'
import { ConnectButton } from '@rainbow-me/rainbowkit'
import ToolStack from 'components/ToolStack'
import SvgItem from 'components/SvgItem'
import { uploadImage } from 'lib/nftStorage'
import { prepareSafeMint } from 'lib/nftContract'
import { setAttributes, setMetadata } from 'lib/metadata'
import { Constants } from 'types'

const Home: NextPage<{}> = () => {
  const { bgColor, country, year, ch } = useAppSelector((state) => state.editor)
  const [account, setAccount] = useState(getAccount().address)

  useEffect(() => {
    // watch
    const unwatch = watchAccount(({ address }) => {
      if (address) {
        setAccount(address)
        console.log(`Connect with ${address}`)
      }
    })
    return unwatch
  }, [])

  const handleMint = async () => {
    try {
      if (!account) throw new Error('no account')

      // metadata
      const name = `${country}-${year}-${ch}`
      const attributes = setAttributes({ country, year, ch })
      const metadata = setMetadata(name, account, attributes)
      console.log(metadata)

      const dataURI = await d3ToPng(`#${Constants.svgId}`, name, {
        scale: 1,
        format: 'webp',
        download: false,
      })

      // ipfs
      const token = await uploadImage(dataURI, metadata)
      console.log({ ...token })

      // mint
      if (!token?.url) throw new Error('invalid token url')
      const tokenURI = token.url.replace('ipfs://', '')
      const config = await prepareSafeMint(account, tokenURI)
      const result = await writeContract(config)
      console.log({ result })
    } catch (error) {
      console.error(error)
    }
  }

  const openPreviewModal = () => {
    modals.openConfirmModal({
      title: (
        <Title order={2} className="absolute-horizontal">
          Preview
        </Title>
      ),
      centered: true,
      radius: 'lg',
      labels: { confirm: 'Mint', cancel: 'Back' },
      groupProps: {
        position: 'center',
        grow: true,
      },
      children: (
        <Box sx={{ margin: '32px 0 16px' }}>
          <AspectRatio
            ratio={1}
            sx={{
              width: '100%',
              borderRadius: 16,
              overflow: 'hidden',
            }}
          >
            <SvgItem />
          </AspectRatio>
        </Box>
      ),
    })
  }

  return (
    <>
      <Head>
        <title>Chinese NFT</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AppShell
        header={
          <Header height={{ base: 72 }} p="md">
            <Group position="apart" spacing="xs">
              <Text>Chinese NFT</Text>
              <ConnectButton />
            </Group>
          </Header>
        }
        navbar={
          <Navbar width={{ base: 400 }}>
            <ScrollArea p={20}>
              <ToolStack />
              <Box sx={{ height: 120 }} />
              <Group
                grow
                sx={{
                  position: 'fixed',
                  bottom: 0,
                  zIndex: 10,
                  left: 10,
                  width: 380,
                  padding: 20,
                  backgroundColor: 'white',
                }}
              >
                <Button
                  size="lg"
                  variant="outline"
                  color="dark"
                  radius="md"
                  onClick={openPreviewModal}
                >
                  Queue
                </Button>
                <Button
                  size="lg"
                  variant="outline"
                  color="dark"
                  radius="md"
                  onClick={openPreviewModal}
                >
                  Mint
                </Button>
              </Group>
            </ScrollArea>
          </Navbar>
        }
        padding={20}
        styles={{
          body: { background: bgColor },
        }}
      >
        <Center h="100%">
          <AspectRatio
            ratio={1}
            sx={{
              width: '100%',
              maxWidth: `calc(100vh - 120px)`,
            }}
          >
            <SvgItem />
          </AspectRatio>
        </Center>

        {/* for d3 */}
        <Box
          sx={{
            position: 'fixed',
            top: 0,
            left: 0,
            zIndex: -1,
            width: 1200,
            height: 1200,
            opacity: 0,
            pointerEvents: 'none',
          }}
        >
          <SvgItem uid={Constants.svgId} />
        </Box>
      </AppShell>
    </>
  )
}

export default Home

export async function getStaticProps() {
  return {
    props: {},
    // Next.js will attempt to re-generate the page:
    // - When a request comes in
    // - At most once every 10 seconds
    revalidate: 60 * 60 * 24, // In seconds
  }
}
